# Boggle Solver
#
import numpy as np

def convert_file_to_word_list(filename):
    """
    Input: text file name contained in current folder
    Output: list of all words in file
    """
    # Source: http://sdsawtelle.github.io/blog/output/scrabble-cheatsheet-with-python.html
    # Readlines returns a list of lines of file until EOF.
    with open(filename) as text:
        dictionary = text.readlines()

    # Strip the newline characters and lowercase each word.
    dictionary = [word.strip('\n\r').lower() for word in dictionary]
    ## end source
    return dictionary

def dict_info(word_list):
    """
    Input: word list generated by convert_file_to_word_list function
    Output: user-friendly info about dictionary
    """
    print("This word list contains " + str(len(word_list)) + " words.")
    len_list = []
    for i in range(len(word_list)):
        len_list.append(len(word_list[i]))
    maximum = max(len_list)
    minimum = min(len_list)
    longest_words_indicies = [i for i, j in enumerate(len_list) if j == maximum]
    longest_words = []
    for i in longest_words_indicies:
        longest_words.append(word_list[i])
    shortest_words_indicies = [i for i, j in enumerate(len_list) if j == minimum]
    shortest_words = []
    for i in shortest_words_indicies:
        shortest_words.append(word_list[i])
    print("The longest words are: " + str(len(longest_words[0])) + " letters.")
    print("The shortest words are: " + str(len(shortest_words[0])) + " letter(s).")



def word_to_brackets(word):
    """
    Input: 'string'
    Output: '['s']['t']['r']['i']['n']['g']'
    """
    output = ''
    for letter in word:
        output = output + "['" + letter + "']"
    return output

def add_word_to_dict(word, dict):
    """
    Input: word and dictionary
    Output: new dictionary with word added
    """
    new_dict = dict
    inner_dict = dict
    for i in range(len(word)):
        if word[i] not in inner_dict:
            insert = word_to_brackets(word[0:i+1])
            if len(word) != i:
                executable_string = "new_dict" + insert + " = {}"
                print(executable_string)
                exec(executable_string)
        if len(word) == i + 1:
            insert = word_to_brackets(word[0:i+1])
            executable_string = "new_dict" + insert + "['end'] = 0"
            print(executable_string)
            exec(executable_string)

        inner_dict = inner_dict[word[i]]

    return new_dict

def add_word_to_dict_william_version(word, dict):
    """
    Input: word and dictionary
    Output: new dictionary with word added
    """
    #new_dict = dict
    inner_dict = dict
    for letter in word:
        if letter not in inner_dict:
            inner_dict[letter] = {}
        inner_dict = inner_dict[letter]
    else:
        inner_dict['end']=0

    return dict


william_dict = {}
susan_dict = {}
for word in ['fart', 'far', 'fatty', 'fat']:
    add_word_to_dict(word, susan_dict)
    add_word_to_dict_william_version(word, william_dict)
    #print("William's dictionary is complete.  Behold!")
print("\nSusan's:")
print(susan_dict)
print("\nWilliam's:")
print(william_dict)


def dict_of_dicts(word_list, add_word_to_dict=add_word_to_dict):
    """
    Input: word list
    Output: dictionary of dictionaries
    """
    dict = {}
    for word in word_list:
        dict = add_word_to_dict(word, dict)
    np.save('my_dictionary.npy', dict)
    return dict

def word_check(word, dict):
    """
    Function: Is the given word in the dictionary?
    Input: word(string) and dict(dictionary)
    Output: True or False
    """
    dict_to_check = dict
    in_dict = 'undetermined'
    for i in range(len(word)):
        if word[i] in dict_to_check:
            dict_to_check = dict_to_check[word[i]]
            if i == len(word) - 1:
                if 'end' in dict_to_check:
                    in_dict = True
                else:
                    in_dict = False
        else:
            in_dict = False
            break
    return in_dict

def find_words_from_position(row, column, board, dictionary):
    """
    Input: row and column of particular loacation on board, random
        board, dictionary of dictionaries
    Output: list of all possible words from that position
    """
    word = ''
    spots_to_check = [[row, column, board, word]]
    while len(spots_to_check != 0):
        for spot in spots_to_check:
            r = spot[0]
            c = spot[1]
            b = spot[2]
            w = spot[3]
            # Update word
            w = w + b[r][c]
            # Remove spot from board
            b[r][c] = 0
            # Check and add neighbors
            neighbors = []

### END FUNCTIONS ###
### BEGIN TESTING ###

words = convert_file_to_word_list('OWL3_Dictionary.txt')
dict_info(words)
my_dict = dict_of_dicts(
    words, add_word_to_dict=add_word_to_dict_william_version)

# Load
my_dict = np.load('my_dictionary.npy').item()
count = 0
for word in words:
    if word_check(word, my_dict) == False:
        print('Problem')
    else:
        count += 1
print(count)


#print(my_dict['a']['p']['p']['l']['e']['end'])

board = [['a', 'c', 'e', 'z'],
         ['s', 'n', 'r', 'o'],
         ['p', 'e', 'e', 't'],
         ['p', 'a', 'h', 's']]
